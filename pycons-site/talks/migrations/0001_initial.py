# Generated by Django 5.0.2 on 2024-09-06 14:11

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import hashid_field.field
import markdownx.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('home', '0009_alter_eventyear_id_alter_pyconevent_id'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CFPSubmissionPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(help_text='Date and time when proposal submissions start')),
                ('end_date', models.DateTimeField(help_text='Date and time when proposal submissions end')),
                ('event_year', models.ForeignKey(default='2024', help_text='The event year this submission period is for', on_delete=django.db.models.deletion.CASCADE, related_name='submission_periods', to='home.eventyear')),
            ],
        ),
        migrations.CreateModel(
            name='Proposal',
            fields=[
                ('title', models.CharField(help_text='Public title. What topic/project is it all about?', max_length=1024)),
                ('talk_type', models.CharField(choices=[('Lightning Talk', 'Lightning Talk - 5 mins'), ('Short Talk', 'Short Talk - 30 mins'), ('Long Talk', 'Long Talk - 45 mins'), ('Tutorial', 'Tutorial - 2 hours'), ('Sponsored Talk', 'Sponsored Talk'), ('Keynote Speaker', 'Keynote Speaker')], max_length=50)),
                ('talk_category', models.CharField(choices=[('GP / Web', 'General Python, Web/DevOps'), ('GC', 'General Community'), ('ET', 'Emerging Technologies'), ('Education', 'Education'), ('O', 'Other')], max_length=50)),
                ('proposal_id', hashid_field.field.HashidAutoField(alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', default=None, min_length=7, prefix='', primary_key=True, serialize=False)),
                ('elevator_pitch', markdownx.models.MarkdownxField(blank=True, help_text='[Supports Markdown] - Describe your Talk to your targeted audience.', null=True)),
                ('talk_abstract', markdownx.models.MarkdownxField(blank=True, help_text='[Supports Markdown] - Your talk_abstract.', null=True)),
                ('status', models.CharField(choices=[('S', 'Submitted'), ('A', 'Accepted'), ('W', 'Waiting List'), ('R', 'Rejected'), ('RS', 'Rejected by Speaker')], default='S', max_length=2)),
                ('intended_audience', models.CharField(blank=True, choices=[('BGN-L', 'Beginner Level'), ('INT-L', 'Intermediate Level'), ('EXP-L', 'Expert Level'), ('GEN-L', 'General')], max_length=50, null=True)),
                ('link_to_preview_video_url', models.URLField(blank=True, help_text='Link to Preview video on your Youtube or Google drive')),
                ('anything_else_you_want_to_tell_us', markdownx.models.MarkdownxField(blank=True, help_text='Kindly add anything else you want to tell us?', null=True)),
                ('special_requirements', markdownx.models.MarkdownxField(blank=True, help_text='If you have any special requirements such as needing travel assistance, accessibility needs, or anything else please let us know here so that we may plan accordingly. (This is not made public nor will the review committee have access to view it.)', null=True)),
                ('recording_release', models.BooleanField(default=True, help_text='By submitting your talk proposal, you agree to give permission to the conference organizers to record, edit, and release audio and/or video of your presentation. If you do not agree to this, please uncheck this box.')),
                ('youtube_video_url', models.URLField(blank=True, help_text='Link to Talk on youtube Video')),
                ('youtube_iframe_url', models.URLField(blank=True, help_text='Link to Youtube Iframe', max_length=300)),
                ('user_response', models.CharField(choices=[('P', 'Pending'), ('A', 'Accepted'), ('R', 'Rejected')], default='P', help_text="User's response to the invitation to present their proposal.", max_length=1)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('event_year', models.ForeignKey(default='', help_text='The event year this proposal is for', on_delete=django.db.models.deletion.CASCADE, related_name='proposals', to='home.eventyear')),
                ('speakers', models.ManyToManyField(blank=True, related_name='speaking_proposals', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposals', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', help_text='Brief name/title of the document.', max_length=255)),
                ('document', models.FileField(default='', help_text='Upload the document file here.', upload_to='documents/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('document_type', models.CharField(choices=[('Slide', 'Slide'), ('Handout', 'Handout'), ('Other', 'Other')], default='Slide', help_text='Type of document (e.g., Slide, Handout).', max_length=50)),
                ('proposal', models.ForeignKey(default=1, help_text='Associated proposal for which this document is uploaded.', on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='talks.proposal')),
            ],
        ),
        migrations.CreateModel(
            name='Proposing_talk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Speak at PyCon Africa', max_length=250)),
                ('content', markdownx.models.MarkdownxField(default='', help_text='[Supports Markdown] - Content.')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('event_year', models.ForeignKey(default='2024', on_delete=django.db.models.deletion.CASCADE, related_name='proposing_talks', to='home.eventyear')),
                ('user', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, related_name='proposing_talk', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Recording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Recording GL at PyCon Africa', max_length=250)),
                ('content', markdownx.models.MarkdownxField(default='', help_text='[Supports Markdown] - Content.')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('event_year', models.ForeignKey(default='2024', on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to='home.eventyear')),
                ('user', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, related_name='recording', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reviewer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reviewer_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comments', models.TextField(blank=True)),
                ('completed', models.BooleanField(default=False)),
                ('talk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='talks.proposal')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='talks.reviewer')),
            ],
        ),
        migrations.CreateModel(
            name='Speak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Speak at PyCon Africa', max_length=250)),
                ('content', markdownx.models.MarkdownxField(default='', help_text='[Supports Markdown] - Content for speaking at PyCon Africa.')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('event_year', models.ForeignKey(default='2024', on_delete=django.db.models.deletion.CASCADE, related_name='speaks', to='home.eventyear')),
                ('user', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, related_name='speak', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SpeakerInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Accepted', 'Accepted'), ('Rejected', 'Rejected')], default='Pending', max_length=20)),
                ('invitation_sent', models.DateTimeField(default=django.utils.timezone.now)),
                ('invitee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='talk_invitations', to=settings.AUTH_USER_MODEL)),
                ('talk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='talks.proposal')),
            ],
        ),
        migrations.CreateModel(
            name='SubScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speaker_expertise', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=1)),
                ('depth_of_topic', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=1)),
                ('relevancy', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=1)),
                ('value_or_impact', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=1)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_scores', to='talks.review')),
            ],
        ),
    ]
